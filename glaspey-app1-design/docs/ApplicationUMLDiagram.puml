@startuml

'Initiates the GUI
class Application {

'Class only has local variables

'@Override
+void start(Stage stage)
+ {static} void main(String[] args)
}

'Stores event data
class Item {
-String description
-String dueDate
-String status

'Data is only added through mutator methods
+Item()
+String getDescription()
+void setDescription(String description)
+String getDueDate()
+void setDueDate(String date)
+String getStatus()
+void setStatus(String s)
}

'Formats Items to be viewed from GUI
class ItemCell {
-HBox hbox
-RadioButton button
-Label description
-Label dueDate
-Label status

+ItemCell()
'@Override
#void updateItem(Item item, boolean empty)
+String getDescription()
+String getDueDate()
+String getStatus()
}

'Alerts user that input must be > 3 characters
class LessThan3CharactersController {
-Button button
~void closePopup(ActionEvent event)

}

'Allows user to load in previously-saved lists
class LoadFileController {
-Button button
-TextField textPane

~void loadLists(ActionEvent event)
}

'Alerts user that there cannot be > 256 of an object
class MoreThan256ObjectsController {
-Button button

~void closePopup(ActionEvent event)
}

'Allows user to save lists to file
class SaveFileController {
-Button button
-TextField textPane

~void saveLists(ActionEvent event)
}

'Controls the main GUI
class SceneController {
-TextField descriptionTextField
-DatePicker dueDateDatePicker
-ListView<ToDoList> leftListView
-ObservableList<ToDoList> list
-ScrollPane leftScrollPane
-Menu menuActions
-MenuItem menuActionsDeleteLists
-MenuItem menuActionsNewList
-MenuItem menuButtonDeleteItems
-Menu menuFile
-MenuItem menuFileLoadList
-MenuItem menuFileSaveList
-Menu menuView
-MenuItem menuViewAll
-MenuItem menuViewComplete
-MenuItem menuViewIncomplete
-Button newItemButton
-ListView<ItemCell> rightListView
-ObservableList<ItemCell> allItems
-ObservableList<ItemCell> statusItems
-ScrollPane rightScrollPane
-TextField rightTitleTextField
-MenuButton statusButton
-MenuItem statusComplete
-MenuItem statusIncomplete

+void initialize()
~void addItemToList(ActionEvent event)
~void changeTitle(ActionEvent event)
~void createList(ActionEvent event)
~void deleteItems(ActionEvent event)
~void loadLists(ActionEvent event)
~void saveLists(ActionEvent event)
~void setDate(KeyEvent event)
~void setDescription(ActionEvent event)
~void setStatusToComplete(ActionEvent event)
~void setStatusToIncomplete(ActionEvent event)
~void viewAllItems(ActionEvent event)
~void viewCompleteItems(ActionEvent event)
~void viewIncompleteItems(ActionEvent event)
~void deleteLists(ActionEvent event)
'Not @FXML
~void callGUI(String fxml)
}

'Stores groups of events
class ToDoList {
-ObservableList<ItemCell> list
-List<ItemCell> listOfItems
-String title

+ToDoList(String title)
+String getTitle()
+void setTitle(String title)
+ObservableList<ItemCell> getList()
+void removeItemFromList(int i)
+void addItemToList(ItemCell item)
+boolean isUnique(String name)
}

class ToDoListCell implements Callback{
'@Override
+ListCell<ToDoList> call(ListView<ToDoList> param)
}

javafx.application.Application <|-- Application
Item <|-- ItemCell
ListCell <|-- Item
LessThan3CharactersController -- SceneController
LoadFileController -- SceneController
LoadFileController -- Item
LoadFileController -- ToDoList
MoreThan256ObjectsController -- SceneController
SaveFileController -- SceneController
SaveFileController -- Item
SaveFileController -- ToDoList
SceneController -- ToDoList
SceneController -- ToDoListCell
SceneController -- ItemCell
ToDoList -- ItemCell
ToDoList -- Item
ToDoList -- ListView
ToDoList -- ListCell
Application -- SceneController

@enduml